================================================================================
For statements
================================================================================

for x in s:
  100

for x, y in pairs(x):
  42u32

for (x, y), w, z in whatever:
  for foo, bar in s:
    0x42f

for _, v {.tag.} in c.pairs:
  discard

--------------------------------------------------------------------------------

(source_file
  (for
    left: (symbol_declaration_list
      (symbol_declaration
        name: (identifier)))
    right: (identifier)
    body: (statement_list
      (integer_literal)))
  (for
    left: (symbol_declaration_list
      (symbol_declaration
        name: (identifier))
      (symbol_declaration
        name: (identifier)))
    right: (call
      function: (identifier)
      arguments: (argument_list
        (identifier)))
    body: (statement_list
      (integer_literal)))
  (for
    left: (symbol_declaration_list
      (tuple_deconstruct_declaration
        (symbol_declaration
          name: (identifier))
        (symbol_declaration
          name: (identifier)))
      (symbol_declaration
        name: (identifier))
      (symbol_declaration
        name: (identifier)))
    right: (identifier)
    body: (statement_list
      (for
        left: (symbol_declaration_list
          (symbol_declaration
            name: (identifier))
          (symbol_declaration
            name: (identifier)))
        right: (identifier)
        body: (statement_list
          (integer_literal)))))
  (for
    left: (symbol_declaration_list
      (symbol_declaration
        name: (blank_identifier))
      (symbol_declaration
        name: (identifier)
        pragma: (pragma_list
          (identifier))))
    right: (dot_expression
      left: (identifier)
      right: (identifier))
    body: (statement_list
      (discard_statement))))

================================================================================
While statements
================================================================================

while true:
  while false:
    nothing

--------------------------------------------------------------------------------

(source_file
  (while
    condition: (boolean_literal)
    body: (statement_list
      (while
        condition: (boolean_literal)
        body: (statement_list
          (identifier))))))

================================================================================
Import statements
================================================================================

import X

import Y, Z,
  J

import K except F

--------------------------------------------------------------------------------

(source_file
  (import_statement
    (identifier))
  (import_statement
    (identifier)
    (identifier)
    (identifier))
  (import_statement
    (identifier)
    (import_exception_list
      (identifier))))

================================================================================
Export statements
================================================================================

export X, Y

export foo

export bar except bar

--------------------------------------------------------------------------------

(source_file
  (export_statement
    (identifier)
    (identifier))
  (export_statement
    (identifier))
  (export_statement
    (identifier)
    (export_exception_list
      (identifier))))

================================================================================
Import from statements
================================================================================

from system import seq, echo

from X import Y

--------------------------------------------------------------------------------

(source_file
  (import_from_statement
    module: (identifier)
    (import_symbol_list
      (identifier)
      (identifier)))
  (import_from_statement
    module: (identifier)
    (import_symbol_list
      (identifier))))

================================================================================
Include statements
================================================================================

include stuff, "foo.txt"

include X

--------------------------------------------------------------------------------

(source_file
  (include_statement
    (identifier)
    (string_literal))
  (include_statement
    (identifier)))

================================================================================
Discard statements
================================================================================

discard "foo"

discard

discard bar

--------------------------------------------------------------------------------

(source_file
  (discard_statement
    (string_literal))
  (discard_statement)
  (discard_statement
    (identifier)))

================================================================================
Assembly statements
================================================================================

asm """
mov
ret
"""

asm "ret"

--------------------------------------------------------------------------------

(source_file
  (assembly_statement
    (string_literal))
  (assembly_statement
    (string_literal)))

================================================================================
Break statements
================================================================================

bRe_ak

break blck

--------------------------------------------------------------------------------

(source_file
  (break_statement)
  (break_statement
    label: (identifier)))

================================================================================
Continue statements
================================================================================

con_tiNue

continue blck

--------------------------------------------------------------------------------

(source_file
  (continue_statement)
  (continue_statement
    label: (identifier)))

================================================================================
Raise statements
================================================================================

raise exp

raise

--------------------------------------------------------------------------------

(source_file
  (raise_statement
    (identifier))
  (raise_statement))

================================================================================
Return statements
================================================================================

return

return X

--------------------------------------------------------------------------------

(source_file
  (return_statement)
  (return_statement
    (identifier)))

================================================================================
Bind statements
================================================================================

bind x, y, z

bind foo

bind foo.bar

--------------------------------------------------------------------------------

(source_file
  (bind_statement
    (identifier)
    (identifier)
    (identifier))
  (bind_statement
    (identifier))
  (bind_statement
    (qualified_symbol
      (identifier)
      (identifier))))

================================================================================
Mixin statements
================================================================================

mixin x, y, z

mixin foo

mixin system.true

--------------------------------------------------------------------------------

(source_file
  (mixin_statement
    (identifier)
    (identifier)
    (identifier))
  (mixin_statement
    (identifier))
  (mixin_statement
    (qualified_symbol
      (identifier)
      (identifier))))

================================================================================
Yield statements
================================================================================

yield

yield none

--------------------------------------------------------------------------------

(source_file
  (yield_statement)
  (yield_statement
    (identifier)))

================================================================================
Static statements
================================================================================

static: echo y

static:
  doX()
  doY()
  assert y, "foo"

--------------------------------------------------------------------------------

(source_file
  (static_statement
    body: (statement_list
      (call
        function: (identifier)
        arguments: (argument_list
          (identifier)))))
  (static_statement
    body: (statement_list
      (call
        function: (identifier))
      (call
        function: (identifier))
      (call
        function: (identifier)
        arguments: (argument_list
          (identifier)
          (string_literal))))))
