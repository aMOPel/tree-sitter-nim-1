================================================================================
Constant declarations
================================================================================

const Foo = 0
coNs_T Bar: int = 10

const
  A = 10
  B: uint32 = 42

const (X, Y) = (1, 2)

const
  Z = 10
  (D, E, F) = (3, 4, 5)

const (X,
  Y*) = (1,
  2)

const
  foo,
    bar*,
    whatever = 10

const Test* {.importc: "TEST".}: int

--------------------------------------------------------------------------------

(source_file
  (const_section
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      value: (integer_literal)))
  (const_section
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      type: (identifier)
      value: (integer_literal)))
  (const_section
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      value: (integer_literal))
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      type: (identifier)
      value: (integer_literal)))
  (const_section
    (variable_declaration
      (tuple_deconstruct_declaration
        (symbol_declaration
          name: (identifier))
        (symbol_declaration
          name: (identifier)))
      value: (tuple
        (integer_literal)
        (integer_literal))))
  (const_section
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      value: (integer_literal))
    (variable_declaration
      (tuple_deconstruct_declaration
        (symbol_declaration
          name: (identifier))
        (symbol_declaration
          name: (identifier))
        (symbol_declaration
          name: (identifier)))
      value: (tuple
        (integer_literal)
        (integer_literal)
        (integer_literal))))
  (const_section
    (variable_declaration
      (tuple_deconstruct_declaration
        (symbol_declaration
          name: (identifier))
        (symbol_declaration
          (exported_symbol
            name: (identifier))))
      value: (tuple
        (integer_literal)
        (integer_literal))))
  (const_section
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      (symbol_declaration
        (exported_symbol
          name: (identifier)))
      (symbol_declaration
        name: (identifier))
      value: (integer_literal)))
  (const_section
    (variable_declaration
      (symbol_declaration
        (exported_symbol
          name: (identifier))
        pragma: (pragma
          (pragma_list
            (colon_expression
              left: (identifier)
              right: (string_literal)))))
      type: (identifier))))

================================================================================
Let declarations
================================================================================

let foo, dar = 0d
lET bar: float = 10f32

l_e_t
  a, c, d = 10
  b: uint32 = 42
  (e, f) = (1, 2)

--------------------------------------------------------------------------------

(source_file
  (let_section
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      (symbol_declaration
        name: (identifier))
      value: (float_literal)))
  (let_section
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      type: (identifier)
      value: (float_literal)))
  (let_section
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      (symbol_declaration
        name: (identifier))
      (symbol_declaration
        name: (identifier))
      value: (integer_literal))
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      type: (identifier)
      value: (integer_literal))
    (variable_declaration
      (tuple_deconstruct_declaration
        (symbol_declaration
          name: (identifier))
        (symbol_declaration
          name: (identifier)))
      value: (tuple
        (integer_literal)
        (integer_literal)))))

================================================================================
Var declarations
================================================================================

var foo = 0d
vaR bar: float = 10f32

v_a_r
  a = 10
  b: uint32 = 42

var x, y: int
var z, w: float

var (c, d) = (2, 3)

--------------------------------------------------------------------------------

(source_file
  (var_section
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      value: (float_literal)))
  (var_section
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      type: (identifier)
      value: (float_literal)))
  (var_section
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      value: (integer_literal))
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      type: (identifier)
      value: (integer_literal)))
  (var_section
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      (symbol_declaration
        name: (identifier))
      type: (identifier)))
  (var_section
    (variable_declaration
      (symbol_declaration
        name: (identifier))
      (symbol_declaration
        name: (identifier))
      type: (identifier)))
  (var_section
    (variable_declaration
      (tuple_deconstruct_declaration
        (symbol_declaration
          name: (identifier))
        (symbol_declaration
          name: (identifier)))
      value: (tuple
        (integer_literal)
        (integer_literal)))))

================================================================================
Type declarations
================================================================================

type X = int
type
  Y = distinct int
  Z = tuple[x, y: int]
  W = tuple
    x: int
    y: int

type A = ref object

type B = ref object
  a*, c*, d: string
  b,
    e,
    f: string

type
  C = object
  D = ref object

--------------------------------------------------------------------------------

(source_file
  (type_section
    (type_declaration
      name: (identifier)
      type: (type_identifier)))
  (type_section
    (type_declaration
      name: (identifier)
      type: (distinct_type
        (type_identifier)))
    (type_declaration
      name: (identifier)
      type: (tuple_type
        (field_declaration_list
          (field_declaration
            name: (identifier)
            name: (identifier)
            type: (type_identifier)))))
    (type_declaration
      name: (identifier)
      type: (tuple_type
        (field_declaration_list
          (field_declaration
            name: (identifier)
            type: (type_identifier))
          (field_declaration
            name: (identifier)
            type: (type_identifier))))))
  (type_section
    (type_declaration
      name: (identifier)
      type: (ref_type
        (object_type))))
  (type_section
    (type_declaration
      name: (identifier)
      type: (ref_type
        (object_type
          (field_declaration_list
            (field_declaration
              (exported_symbol
                name: (identifier))
              (exported_symbol
                name: (identifier))
              name: (identifier)
              type: (type_identifier))
            (field_declaration
              name: (identifier)
              name: (identifier)
              name: (identifier)
              type: (type_identifier)))))))
  (type_section
    (type_declaration
      name: (identifier)
      type: (object_type))
    (type_declaration
      name: (identifier)
      type: (ref_type
        (object_type)))))
