================================================================================
Constant declarations
================================================================================

const Foo = 0
coNs_T Bar: int = 10

const
  A = 10
  B: uint32 = 42

const (X, Y) = (1, 2)

const
  Z = 10
  (D, E, F) = (3, 4, 5)

const (X,
  Y*) = (1,
  2)

const
  foo,
    bar*,
    whatever = 10

const Test* {.importc: "TEST".}: int

--------------------------------------------------------------------------------

(source_file
  (const_section
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier)))
      value: (integer_literal)))
  (const_section
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier)))
      type: (identifier)
      value: (integer_literal)))
  (const_section
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier)))
      value: (integer_literal))
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier)))
      type: (identifier)
      value: (integer_literal)))
  (const_section
    (variable_declaration
      (symbol_declaration_list
        (tuple_deconstruct_declaration
          (symbol_declaration
            name: (identifier))
          (symbol_declaration
            name: (identifier))))
      value: (tuple
        (integer_literal)
        (integer_literal))))
  (const_section
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier)))
      value: (integer_literal))
    (variable_declaration
      (symbol_declaration_list
        (tuple_deconstruct_declaration
          (symbol_declaration
            name: (identifier))
          (symbol_declaration
            name: (identifier))
          (symbol_declaration
            name: (identifier))))
      value: (tuple
        (integer_literal)
        (integer_literal)
        (integer_literal))))
  (const_section
    (variable_declaration
      (symbol_declaration_list
        (tuple_deconstruct_declaration
          (symbol_declaration
            name: (identifier))
          (symbol_declaration
            (exported_symbol
              name: (identifier)))))
      value: (tuple
        (integer_literal)
        (integer_literal))))
  (const_section
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier))
        (symbol_declaration
          (exported_symbol
            name: (identifier)))
        (symbol_declaration
          name: (identifier)))
      value: (integer_literal)))
  (const_section
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          (exported_symbol
            name: (identifier))
          pragma: (pragma_list
            (colon_expression
              left: (identifier)
              right: (string_literal)))))
      type: (identifier))))

================================================================================
Let declarations
================================================================================

let foo, dar = 0d
lET bar: float = 10f32

l_e_t
  a, c, d = 10
  b: uint32 = 42
  (e, f) = (1, 2)

--------------------------------------------------------------------------------

(source_file
  (let_section
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier))
        (symbol_declaration
          name: (identifier)))
      value: (float_literal)))
  (let_section
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier)))
      type: (identifier)
      value: (float_literal)))
  (let_section
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier))
        (symbol_declaration
          name: (identifier))
        (symbol_declaration
          name: (identifier)))
      value: (integer_literal))
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier)))
      type: (identifier)
      value: (integer_literal))
    (variable_declaration
      (symbol_declaration_list
        (tuple_deconstruct_declaration
          (symbol_declaration
            name: (identifier))
          (symbol_declaration
            name: (identifier))))
      value: (tuple
        (integer_literal)
        (integer_literal)))))

================================================================================
Var declarations
================================================================================

var foo = 0d
vaR bar: float = 10f32

v_a_r
  a = 10
  b: uint32 = 42

var x, y: int
var z, w: float

var (c, d) = (2, 3)

--------------------------------------------------------------------------------

(source_file
  (var_section
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier)))
      value: (float_literal)))
  (var_section
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier)))
      type: (identifier)
      value: (float_literal)))
  (var_section
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier)))
      value: (integer_literal))
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier)))
      type: (identifier)
      value: (integer_literal)))
  (var_section
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier))
        (symbol_declaration
          name: (identifier)))
      type: (identifier)))
  (var_section
    (variable_declaration
      (symbol_declaration_list
        (symbol_declaration
          name: (identifier))
        (symbol_declaration
          name: (identifier)))
      type: (identifier)))
  (var_section
    (variable_declaration
      (symbol_declaration_list
        (tuple_deconstruct_declaration
          (symbol_declaration
            name: (identifier))
          (symbol_declaration
            name: (identifier))))
      value: (tuple
        (integer_literal)
        (integer_literal)))))

================================================================================
Type aliases
================================================================================

type X = int
type
  Y = distinct int
  A[T] = ref T

--------------------------------------------------------------------------------

(source_file
  (type_section
    (type_declaration
      (type_symbol_declaration
        name: (identifier))
      (identifier)))
  (type_section
    (type_declaration
      (type_symbol_declaration
        name: (identifier))
      (distinct_type
        (identifier)))
    (type_declaration
      (type_symbol_declaration
        name: (identifier)
        (generic_parameter_list
          (parameter_declaration
            (symbol_declaration_list
              (symbol_declaration
                name: (identifier))))))
      (ref_type
        (identifier)))))

================================================================================
Object declarations
================================================================================

type
  SeqData[T] = object
    capacity: int
    buffer: UncheckedArray[T]

  NimNodeObj = object
    case kind: NimNodeKind
    of nnkNone, nnkEmpty, nnkNilLit:
      nil
    of nnkCharLit..nnkUInt64Lit:
      intVal: BiggestInt
    of nnkFloatLit..nnkFloat64Lit:
      floatVal: BiggestFloat
    of nnkStrLit..nnkTripleStrLit, nnkCommentStmt, nnkIdent, nnkSym:
      strVal: string
    else:
      sons: seq[NimNode]

type ValueError = object of Exception

type
  B = ref object
    a*, c*, d: string
    b,
      e,
      f: string

  Person* {.ro, tableName: "PERSON".} = ref object of Model
    name* {.unique.}: string
    pet* {.onDelete: "CASCADE".}: Option[Pet]

type
  C = object
  D = ref object

--------------------------------------------------------------------------------

(source_file
  (type_section
    (type_declaration
      (type_symbol_declaration
        name: (identifier)
        (generic_parameter_list
          (parameter_declaration
            (symbol_declaration_list
              (symbol_declaration
                name: (identifier))))))
      (object_declaration
        (field_declaration_list
          (field_declaration
            (symbol_declaration_list
              (symbol_declaration
                name: (identifier)))
            type: (identifier))
          (field_declaration
            (symbol_declaration_list
              (symbol_declaration
                name: (identifier)))
            type: (bracket_expression
              left: (identifier)
              right: (argument_list
                (identifier)))))))
    (type_declaration
      (type_symbol_declaration
        name: (identifier))
      (object_declaration
        (field_declaration_list
          (variant_declaration
            (variant_descriminator_declaration
              (symbol_declaration
                name: (identifier))
              type: (identifier))
            (of_branch
              values: (expression_list
                (identifier)
                (identifier)
                (identifier))
              (field_declaration_list
                (nil_literal)))
            (of_branch
              values: (expression_list
                (binary_expression
                  left: (identifier)
                  right: (identifier)))
              (field_declaration_list
                (field_declaration
                  (symbol_declaration_list
                    (symbol_declaration
                      name: (identifier)))
                  type: (identifier))))
            (of_branch
              values: (expression_list
                (binary_expression
                  left: (identifier)
                  right: (identifier)))
              (field_declaration_list
                (field_declaration
                  (symbol_declaration_list
                    (symbol_declaration
                      name: (identifier)))
                  type: (identifier))))
            (of_branch
              values: (expression_list
                (binary_expression
                  left: (identifier)
                  right: (identifier))
                (identifier)
                (identifier)
                (identifier))
              (field_declaration_list
                (field_declaration
                  (symbol_declaration_list
                    (symbol_declaration
                      name: (identifier)))
                  type: (identifier))))
            (else_branch
              (field_declaration_list
                (field_declaration
                  (symbol_declaration_list
                    (symbol_declaration
                      name: (identifier)))
                  type: (bracket_expression
                    left: (identifier)
                    right: (argument_list
                      (identifier)))))))))))
  (type_section
    (type_declaration
      (type_symbol_declaration
        name: (identifier))
      (object_declaration
        inherits: (identifier))))
  (type_section
    (type_declaration
      (type_symbol_declaration
        name: (identifier))
      (ref_type
        (object_declaration
          (field_declaration_list
            (field_declaration
              (symbol_declaration_list
                (symbol_declaration
                  (exported_symbol
                    name: (identifier)))
                (symbol_declaration
                  (exported_symbol
                    name: (identifier)))
                (symbol_declaration
                  name: (identifier)))
              type: (identifier))
            (field_declaration
              (symbol_declaration_list
                (symbol_declaration
                  name: (identifier))
                (symbol_declaration
                  name: (identifier))
                (symbol_declaration
                  name: (identifier)))
              type: (identifier))))))
    (type_declaration
      (type_symbol_declaration
        (exported_symbol
          name: (identifier))
        pragma: (pragma_list
          (identifier)
          (colon_expression
            left: (identifier)
            right: (string_literal))))
      (ref_type
        (object_declaration
          inherits: (identifier)
          (field_declaration_list
            (field_declaration
              (symbol_declaration_list
                (symbol_declaration
                  (exported_symbol
                    name: (identifier))
                  pragma: (pragma_list
                    (identifier))))
              type: (identifier))
            (field_declaration
              (symbol_declaration_list
                (symbol_declaration
                  (exported_symbol
                    name: (identifier))
                  pragma: (pragma_list
                    (colon_expression
                      left: (identifier)
                      right: (string_literal)))))
              type: (bracket_expression
                left: (identifier)
                right: (argument_list
                  (identifier)))))))))
  (type_section
    (type_declaration
      (type_symbol_declaration
        name: (identifier))
      (object_declaration))
    (type_declaration
      (type_symbol_declaration
        name: (identifier))
      (ref_type
        (object_declaration)))))

================================================================================
Tuple declarations
================================================================================

type
  Z = tuple[x, y: int]
  W = tuple
    x: int
    y: int

  V = tuple

--------------------------------------------------------------------------------

(source_file
  (type_section
    (type_declaration
      (type_symbol_declaration
        name: (identifier))
      (tuple_type
        (field_declaration
          (symbol_declaration_list
            (symbol_declaration
              name: (identifier))
            (symbol_declaration
              name: (identifier)))
          type: (identifier))))
    (type_declaration
      (type_symbol_declaration
        name: (identifier))
      (tuple_type
        (field_declaration
          (symbol_declaration_list
            (symbol_declaration
              name: (identifier)))
          type: (identifier))
        (field_declaration
          (symbol_declaration_list
            (symbol_declaration
              name: (identifier)))
          type: (identifier))))
    (type_declaration
      (type_symbol_declaration
        name: (identifier))
      (tuple_type))))
